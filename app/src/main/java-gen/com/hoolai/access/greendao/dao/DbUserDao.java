package com.hoolai.access.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hoolai.access.greendao.bean.DbUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_USER".
*/
public class DbUserDao extends AbstractDao<DbUser, String> {

    public static final String TABLENAME = "DB_USER";

    /**
     * Properties of entity DbUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Account = new Property(0, String.class, "account", true, "ACCOUNT");
        public final static Property Password = new Property(1, String.class, "password", false, "PASSWORD");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
    };


    public DbUserDao(DaoConfig config) {
        super(config);
    }
    
    public DbUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_USER\" (" + //
                "\"ACCOUNT\" TEXT PRIMARY KEY NOT NULL ," + // 0: account
                "\"PASSWORD\" TEXT NOT NULL ," + // 1: password
                "\"DESC\" TEXT," + // 2: desc
                "\"DATE\" INTEGER NOT NULL );"); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbUser entity) {
        stmt.clearBindings();
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(1, account);
        }
        stmt.bindString(2, entity.getPassword());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
        stmt.bindLong(4, entity.getDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbUser readEntity(Cursor cursor, int offset) {
        DbUser entity = new DbUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // account
            cursor.getString(offset + 1), // password
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desc
            new java.util.Date(cursor.getLong(offset + 3)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbUser entity, int offset) {
        entity.setAccount(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassword(cursor.getString(offset + 1));
        entity.setDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbUser entity, long rowId) {
        return entity.getAccount();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbUser entity) {
        if(entity != null) {
            return entity.getAccount();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
